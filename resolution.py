# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nk-X_pER3FlHjdD7dRPk0LrNEFfjr4Ku
"""
ID:20210589    ID:20210071
def skolemization(formula):
    symbol = '∃'
    result = ''
    i = 0
    counter = 1  # Initialize counter for generating unique identifiers

    # Extract unique variables
    while i < len(formula) - 1:
        if formula[i] == symbol and formula[i+1] not in result:
            result += formula[i+1]
            formula = formula.replace(formula[i+1], '', 1)  # Remove only once
        else:
            i += 1

    formula = formula.replace(symbol, '')

    # Create dictionary to store variable replacements


    # Replace variables with unique identifiers
    for char in result:
        if char in formula and char.isalpha():
            FX = "F" + str(counter) + "(x)"
            formula = formula.replace(char, FX,10000)
            counter += 1

    return formula

print(skolemization("∀x ∃y  ∃z P(x) ∨ Q(y) p(y) p(z) "))

def move_negation_inward(sentence):
    new_sentence = ""
    i = 0
    flag1=0
    flag2=0
    while i < len(sentence):
        if sentence[i] == '¬':
            i += 1
            if sentence[i] == '(':
                new_sentence += '¬'
                i += 1
                while i < len(sentence) and sentence[i] != ')':
                    if sentence[i] == '∨':
                        new_sentence += '∧'
                        new_sentence += '¬'
                    elif sentence[i] == '∧':
                        new_sentence += '∨'
                        new_sentence += '¬'
                    else:
                        new_sentence += sentence[i]
                    i += 1
            elif sentence[i] == '∃':
              new_sentence +='∀'
              i+=1
              while not sentence[i].isalpha():
                i+=1
              new_sentence += sentence[i]
              i+=1
              new_sentence += '¬'
              i+=1
            elif sentence[i] == '∀':
              new_sentence +='∃'
              i+=1
              while not sentence[i].isalpha():
                i+=1
              new_sentence += sentence[i]
              i+=1
              new_sentence += '¬'
              i+=1



        else:

            new_sentence += sentence[i]
            i += 1
    new_sentence = new_sentence.replace(')', '')

    return new_sentence

print(move_negation_inward('¬( p ∨ q)'))

def RemoveDoubleNot(kb):
      j = kb.find("¬¬")
      if j !=-1:
        kb.replace("¬¬","")

def EliminateQuantifier(kb):
  inde=0
  NewKb=""
  for i, char in enumerate(kb):
        if i == "∀" or i == "∃":
          kb.replace(kb[i+1],"")
          continue
        else:
          Newkb += char



  return Newkb

def EliminateImplication(kb):


    # Find the index of the first occurrence of "=>"
    j = kb.find("=>")

    # Initialize 'new' outside the loop
    new = kb

    if j != -1 :
        FristPart = kb[:(j )]
        SecPart = kb[(j + 2):]
        new = "¬"+FristPart+"V"+ SecPart


    return new
